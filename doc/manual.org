#+title: Remaster
#+subtitle: High-fidelity stochastic tree simulation for BEAST 2
#+author: Tim Vaughan

#+SETUPFILE: theme.org
#+EXPORT_FILE_NAME: index.html

**Warning: Remaster is still in development and not yet suitable for production use.**

GitHub Repository: https://github.com/tgvaughan/remaster

* Overview

Remaster is a flexible tool for simulating trajectories
and trees from the birth-death and coalescent models commonly employed in
phylodynamic inference, as well as some less common models.

Remaster defines birth-death population models using an intuitive
"reaction" notation borrowed from chemistry.  Using this notation,
a simple birth-death process on the number of individuals of type $X$
might be expressed using the following pair of reactions:
$$X \overset{\lambda}{\longrightarrow} 2X$$
and
$$X \overset{\mu}{\longrightarrow} 0$$
where in each case the elements on the left-hand side of the arrow
indicate the individual(s) involved in the reaction (the reactants),
and the elements on the right-hand side correspond to the individual(s)
remaining after the reaction has fired.  The symbol above the arrow
represents the rate (probability per unit time) at which the reaction
fires for each available combination of reactants.

In order to permit the simulation of reconstructed phylogenies corresponding
to subsets of the whole population, Remaster allows users to specify that
one or more of the model populations are "sample" populations.  This means
that sampling processes can be explicitly included in the simulation model.
For instance, by adding the reaction
$$ X \overset{\psi}{\longrightarrow} S$$
where $S$ is defined as a sample population, the birth-death model above becomes the
linear birth-death-sampling model which is the basis of much modern phylodynamic inference.

In addition, Remaster allows one to define "punctual" reactions which occur
at pre-determined times and fire a fixed or stochastic number of times.
Besides allowing models to include interesting discrete events, this allows
users to pre-specify sample counts and times.

Setting up a birth-death model in master involves composing an XML input file
describing initial population sizes and the set of reactions governing
their dynamics.  The input file format is quite readable and concise.
For example, the following is a complete XML input file for 
simulating 100 trees under a the above birth-death sampling model with
$\lambda=2$, $\mu=1$ and $\psi=0.1$:

#+begin_src xml
<beast version="2.0" namespace="beast.base.inference:base.base.inference.parameter:remaster">
    <run spec="Simulator" nSims="100">
        <simulate spec="SimulatedTree" id="tree">
            <trajectory spec="StochasticTrajectory" id="SIRTrajectory" endsWhen="S>=10">
                <population spec="RealParameter" id="X" value="1"/>
                <samplePopulation spec="RealParameter" id="S" value="0"/>

                <reaction spec="Reaction" rate="2"> X -> 2X </reaction>
                <reaction spec="Reaction" rate="1"> X -> 0 </reaction>
                <reaction spec="Reaction" rate="0.1"> X -> S </reaction>
            </trajectory>
        </simulate>

        <logger spec="Logger" fileName="simulated.trees">
            <log idref="tree"/>
        </logger>
    </run>
</beast>
#+end_src

For coalescent tree simulation, Remaster uses a similar approach to model
specification but relies on BEAST 2 ~PopulationFunction~ objects (such as
~ConstantPopulation~ and ~ExponentialGrowth~) to condition on population
dynamics, together with reactions which are directly applied to coalescent
tree lineages as they evolve backward in time.

Remaster is a [[https://www.beast2.org/][BEAST 2]] package, and integrates well with that platform.
Simulated Remaster trees can be used directly inside of regular BEAST
XML analysis scripts to initialise MCMC states or construct
simulation-based validation studies.

** The name

"Remaster" is a play on the name of an earlier simulation tool, [[https://tgvaughan.github.io/MASTER][MASTER]].
Remaster is a new implementation which is faster, leaner, and more capable
of performing the simulation tasks for which MASTER itself is actually used.

** License

Remaster is free software, and is made available under the terms of
version 3 of the GNU General Public License, the text of which is
available [[https://raw.githubusercontent.com/tgvaughan/remaster/master/COPYING][here]].  The source code for the project can be found at the
official GitHub project page: https://github.com/tgvaughan/remaster.

* Installation

Remaster is a BEAST 2 package and will eventually be available for installation
directly from the standard BEAST 2 package repository.  However, while it is still
in development, installation must be done as follows:

1. Open BEAUti,
2. Open the =File= menu and select =Manage packages=.
3. Press the =Package repositories= button at the bottom of the dialog box, then add the
   following URL: https://tgvaughan.github.io/remaster/package.xml
4. Press =Done= to return to the package list.
5. Select "remaster" from the package list and press the =Install/Upgrade= button.

Remaster should now be available on your system, and running beast
with a Remaster input file should perform the corresponding
simulation.

* Birth-death simulations

Birth-death simulations are the bread and butter of Remaster.  Unlike
MASTER, Remaster is built from the ground up to make simulating
birth-death trajectories and trees as easy and flexible as possible.

** Model specification

Like MASTER, Remaster defines models in terms of [[*Populations][populations]] and [[*Reactions][reactions]].

*** Populations

A population in Remaster is simply a ~RealParameter~ (or other
~Function~) with a specific ID.  The value of the ~RealParameter~ is
used as its initial population size in the simulation.

For example, the following defines a population named "X" with an initial size
of 10:
#+begin_src xml
<population id="X" spec="RealParameter" value="10"/>
#+end_src

If the ~RealParameter~ is a vector, its elements represent subpopulations.
For example, the following population "Y" has two subpopulations initially
occupied by 1 and 10 individuals, respectively:
#+begin_src xml
<population id="Y" spec="RealParameter" value="1 10"/>
#+end_src

Populations may also be marked as "sample" populations by using the appropriate
tag:
#+begin_src xml
<samplePopulation id="sample" spec="RealParameter" value="0"/>
#+end_src
For trajectories, sample populations behave just like any other
population, besides being forbidden from appearing on the reactant
side of a reaction.  individuals of these populations take on a
special meaning when trees are simulated, however, as the production
of a sample corresponds to the creation of a node (internal or
external) in the resulting tree.

*** Reactions

Reactions connect zero or more *reactant* individuals with zero or
more *product* individuals.  The dynamics that Remaster simulates are
simply the result of applying reactions at random or pre-determined times.

There are two distinct kinds of reactions which can be specified: "continuous"
reactions and "punctual" reactions.


**** Continuous reactions

As the name suggests, reactions are applied continuously throughout the
simulation at particular /rates/ which determine the probability per
unit time for the reaction firing on each of the possible combinations
of reactant individuals.

Use the following notation to specify a continuous reaction with a fixed rate in the XML:
#+begin_src xml
<reaction spec="Reaction" rate="2"> S + I -> 2I </reaction>
#+end_src

The rate of a continuous reaction can change at one or more times.  For example,
to specify that the rate should change from 2 to 1.4 at time 4, you can write
the following:
#+begin_src xml
<reaction spec="Reaction" rate="2 1.4" changeTimes="4"> S + I -> 2I </reaction>
#+end_src

**** Punctual reactions

In contrast, punctual reactions are applied at one or more pre-defined
/times/. At each of these times, a punctual reaction may be applied
with some probability to each available combination of reactants
(i.e. the number of times the reaction fires is still random) or it
may be applied a pre-specified number of times.

To specify a punctual reaction which fires with a particular probability
for each available reactant (here 0.5) and at a chosen time (here 10),
use the following notation:
#+begin_src xml
<reaction spec="PunctualReaction" p="0.5" times="10"> I -> sample </reaction>
#+end_src

To instead configure the reaction to fire a fixed number of times (say
5), replace the =p= attribute with a =n= attribute specifying the
number:
#+begin_src xml
<reaction spec="PunctualReaction" n="5" times="10"> I -> sample </reaction>
#+end_src

Each of =p=, =n= and =times= can take more than one value. For instance,
to specify that the sampling reaction should fire 5 times at time 1.0,
7 times at time 2.0 and 10 times at time 5.0, one could write
#+begin_src xml
<reaction spec="PunctualReaction" n="5 7 10" times="1.0 2.0 5.0"> I -> sample </reaction>
#+end_src

In the case that the number of elements provided to =n= or =p= and the
number provided to =time= do not match, elements of the shorter vector
are reused.  Thus one could specify multiple $\rho$-sampling events
each with the same sampling probability of $\rho=0.5$ by writing
#+begin_src xml
<reaction spec="PunctualReaction" p="0.5" times="1.0 2.0 5.0"> I -> sample </reaction>
#+end_src

**** Identifying parents and children

Although the reaction notation is intuitive, on its own it does not
specify the parent/child relationships between reactants and products.
For example, consider the following reaction representing pathogen
transmission in an SIR model:

#+begin_src xml
<reaction spec="Reaction" rate="0.1"> S + I -> 2I </reaction>
#+end_src

The only thing which can be determined from this reaction is that one $S$
and one $I$ individual are replaced by a pair of $I$ individuals.  It is
completely unclear whether either of the $S$ or $I$ reactants should be
regarded as a parent of any of the products.

Specifying these relationships is necessary in order for trees composed
of ancestral lineages can be built.

There are two main ways to work around this limitation.  Firstly, one can
rely on Remaster to automatically associate parents with children.
By default, Remaster assumes that a product individual is considered to
be
1. the child of the first reactant having the same population type, if one exists, or
2. the child the first reactant listed, if one exists, or
3. an orphan.

These rules mean that, in the SIR reaction above, the two $I$ product individuals
would be regarded as children of the $I$ reactant, and that the $S$ would have no
children.

Alternatively, Remaster lets you explicitly specify parent-child relationships
by appending ":label" tags to reaction elements identifying them as belonging
to the same family.  If, for instance, we wanted the $S$ reactant to be the parent
of the two $I$ products, we could write

#+begin_src xml
<reaction spec="Reaction" rate="0.1"> S:a + I:b -> 2I:a </reaction>
#+end_src

Note that unlike MASTER, Remaster requires each child have at most one parent, ensuring
that the resulting relationships are tree-like.

** Trajectory simulation

Trajectories are simply realisations of the population process.  There are two
distinct types of trajectories in Remaster: *stochastic trajectories* and *deterministic trajectories*.

Stochastic trajectories are simulated using a standard Gillespie-style
algorithm, and are exact realisations of the continuous-time
discrete-state Markov process defined by the reactions.  These are the
trajectories that you'll want to use to simulate trees under
birth-death phylodynamic models.

Deterministic trajectories are simulated by integrating a set of
ordinary differential equations corresponding to the reactions.  The
dynamics generated are essentially the limiting behaviour of the
stochastic trajectories when the population sizes are very large and
the relative impact of the demographic stochasticity becomes
vanishingly small.  These are the trajectories you'll want to use to
simulate trees under coalescent approximations of
birth-death models.

*** Stochastic Trajectories

Once the population and reaction elements are specified, defining a
stochastic trajectory in Remaster's XML is very easy.

For example, the following represents a stochastic
birth-death-sampling process trajectory with constant rates:

#+begin_src xml
  <trajectory spec="StochasticTrajectory"
              maxTime="10">
    <population id="X" spec="RealParameter" value="1"/>

    <reaction spec="Reaction" rate="1.2"> X -> 2X </reaction>
    <reaction spec="Reaction" rate="1"> X -> 0 </reaction>
  </trajectory>
#+end_src

The =maxTime= attribute specifies the maximum end time of the
simulation.  For stochastic trajectories this attribute is actually
optional, since there are many birth-death processes (although not
this one) are guaranteed to terminate in finite amount of time.
(Remaster always ceases the simulation once no reactions are able to
fire.)

*** Deterministic Trajectories

Defining deterministic trajectories is almost exactly the same as defining
a stochastic trajectory.  The only difference is that the =spec= attribute
must be set to "DeterministicTrajectory" and the =maxTime= attribute is
mandatory.

For example, the following represents an exponentially growing population
with rate $\lambda-\mu=1.2-1.0=0.2$:
#+begin_src xml
  <trajectory spec="DeterministicTrajectory"
              maxTime="10">
    <population id="X" spec="RealParameter" value="1"/>

    <reaction spec="Reaction" rate="1.2"> X -> 2X </reaction>
    <reaction spec="Reaction" rate="1"> X -> 0 </reaction>
  </trajectory>
#+end_src

Another minor difference is that the =endsWhen= condition can only
include inequalities, since detecting equality in floating point
numbers can be problematic.

Finally, ~DeterministicTrajectory~ accepts two numerical attributes,
=forwardRelativeStepSize= and =backwardRelativeStepSize=.  These
attributes define the size of the steps taken by the forward-time and
backward-time numerical integrators, respectively, relative to the
total simulation time. Reducing the size of these values increases the
accuracy of the deterministic trajectory calculation and the
associated tree simulation, but makes the calculation more
computationally demanding.  The forward-time step size affects the
population size trajectory calculation accuracy, while the
backward-time step size affects only the subsequent tree simulation
accuracy.  Leaving these values to their default settings is usually
okay, but smaller step sizes may be necessary to avoid numerical
errors in certain situations. (These sometimes manifest in the form of
"too many lineages remaining" errors.) Models where populations are
changing very quickly are particularly susceptible to such problems.

*** Placing conditions on trajectories

In addition to the rates and initial population sizes, conditions can
be placed on trajectory outcomes so that the simulation finishes
when the population sizes reach some specified target or, in the case
of stochastic trajectories, the resulting trajectory is only "accepted"
when a particular condition is met.

To define an early termination point, provide the =endsWhen= attribute
to the trajectory element.  The value of the attribute should be a
predicating which will cause the simulation to end when it becomes true.
For instance
#+begin_src xml
  <trajectory spec="StochasticTrajectory"
              endsWhen="X=100">
  ...
  </trajectory>
#+end_src
defines a trajectory whose simulation will be terminated the instant that
the $X$ population contains exactly 100 individuals.

Similarly, to define a condition on the finished simulation, use the
=mustHave= attribute. For instance,
#+begin_src xml
  <trajectory spec="StochasticTrajectory"
              mustHave="sample<=50">
  ...
  </trajectory>
#+end_src
specifies that the  "sample" population must contain at most 50 individuals
at the end of the simulation.

The complete syntax for these predicates is specified in section [[*Condition syntax]].

*** Self-contained trajectory simulation XMLs

While the above XML fragments are sufficient to represent a simulated trajectory, in order to actually be useful
it needs to be embedded in a BEAST XML that produces output.  The most direct way to do this is via
Remaster's =Simulator= object, which can be used as a =<run>= element as follows:

#+begin_src xml
  <beast version="2.0" namespace="beast.base.inference:beast.base.inference.parameter:remaster">
    <run spec="Simulator" nSims="100">
      <simulate id="trajectory" spec="StochasticTrajectory" maxTime="10">
        <population id="X" spec="RealParameter" value="1"/>
        <reaction spec="Reaction" rate="1.2"> X -> 2X </reaction>
        <reaction spec="Reaction" rate="1"> X -> 0 </reaction>
      </simulate>

      <logger fileName="output.traj">
        <log idref="trajectory"/>
      </logger>
    </run>
  </beast>
#+end_src

The =Simulator= takes the following inputs:
- nSims :: an integer specifying the number of independent simulations to perform,
- simulate :: an object representing the simulation, in this case a =StochasticTrajectory=, and
- logger :: what to record in the output files for each replicate of the simulation.
  This input can take multiple values, one for each output file.
  (In this case we only produce one output file, containing a representation of the whole simulated trajectory.)

To run the simulation and produce the output, copy the above XML into
a file named something like "BDtraj.xml" and then run it through BEAST:
#+begin_example
$ beast BDtraj.xml
#+end_example

This should produce some screen output, together with a file
"output.traj" containing the simulated trajectories.

*** Plotting simulated trajectories

In order to actually visualize the simulation output, we can make use of the script
[[https://github.com/tgvaughan/remaster/blob/master/scripts/trajTools.R][trajTools.R]] which one can find in the =scripts/= directory of the Remaster repository
to load the trajectories into a data frame:

#+begin_src R
  source("<PATH>/Remaster/scripts/trajTools.R")
  traj <- loadTrajectories("output.traj")
#+end_src
(Here "<PATH>" is the path to the Remaster repository or package directory.)

The resulting data frame has the following layout:
#+begin_example
> traj
# A tibble: 8,039 × 5
        t population index value Sample
    <dbl> <chr>      <dbl> <dbl>  <int>
 1 0      X              0     1      0
 2 1.05   X              0     0      0
 3 0      X              0     1      1
 4 0.0269 X              0     2      1
 5 0.0484 X              0     3      1
 6 0.213  X              0     2      1
 7 0.990  X              0     1      1
 8 1.73   X              0     2      1
 9 1.80   X              0     3      1
10 1.95   X              0     4      1
# … with 8,029 more rows
#+end_example
Each row specifies the size of a particular population (or
subpopulation) at a particular time.  The "Sample" indices
indicate to which specific simulated trajectory the results belong.

This format is ideal for plotting using [[https://ggplot2.tidyverse.org][ggplot2]]:
#+begin_src R
  ggplot(traj, aes(t, value, group_by=factor(Sample))) + geom_step(alpha=0.5)
#+end_src

[[file:examples/BDtraj_output.png]]

** Tree simulation

Once a trajectory simulation is configured, producing the corresponding trees
is easy.  All that is required is to enclose the trajectory element
(=DeterministicTrajectory= or =StochasticTrajectory=) in a =SimulatedTree= element:
#+begin_src xml
  <tree spec="SimulatedTree">
    <trajectory spec="StochasticTrajectory"
                maxTime="10">
      <population id="X" spec="RealParameter" value="1"/>
      <samplePopulation id="samp" spec="RealParameter" value="0"/>

      <reaction spec="Reaction" rate="1.4"> X -> 2X </reaction>
      <reaction spec="Reaction" rate="0.5"> X -> 0 </reaction>
      <reaction spec="Reaction" rate="0.5"> X -> samp </reaction>
    </trajectory>
  </tree>
#+end_src

For trajectories generated using =StochasticTrajectory=, trees are
exact realisations of the reconstructed phylogeny under the
corresponding branching process.  For trajectories generated using
=DeterministicTrajectory=, trees can be considered samples from a
diffusion approximation to the branching process.  (For details on this
kind of approximation, see [[https://doi.org/10.1534/genetics.111.134627][Volz et al., Genetics, 2012]].)

Besides =trajectory=, =SimulatedTree= takes one optional input:
=maxRetries=.  This is the maximum number of times the simulator
should attempt to produce a tree, in the event that the first
simulated tree does not have exactly one root lineage.  (Simulated
trees may have more than one root lineage in the instance that not all
sampled lineages find a common ancestor before the start of the
simulation; a situation common for deterministic trajectories. It can
also occur when the initial number of individuals in the sampled
population is greater than 1.)

*** Self-contained tree simulation XMLs 

A self-contained tree simulation XML is very similar to a self-contained trajectory
simulation XML.  The only differences are that tree simulation XMLs have a =SimulatedTree=
object for the =<simulate>= element, and generally have a logger which writes the
simulated trees to a file.

For example, here is a full XML description of a tree simulator which produces
trees sampled from a linear birth-death-sampling model and saves them to a file
named "output.trees":

#+begin_src xml
  <beast version="2.0" namespace="beast.base.inference:beast.base.inference.parameter:remaster">
    <run spec="Simulator" nSims="1">
      <simulate id="tree" spec="SimulatedTree">
        <trajectory id="trajectory" spec="StochasticTrajectory" maxTime="10">
          <population id="X" spec="RealParameter" value="1"/>
          <samplePopulation id="samp" spec="RealParameter" value="0"/>

          <reaction spec="Reaction" rate="1.4"> X -> 2X </reaction>
          <reaction spec="Reaction" rate="0.5"> X -> 0 </reaction>
          <reaction spec="Reaction" rate="0.5"> X -> samp </reaction>
        </trajectory>
      </simulate>

      <logger fileName="output.traj">
        <log idref="trajectory"/>
      </logger>

      <logger fileName="output.trees">
        <log idref="tree"/>
      </logger>
    </run>
  </beast>
#+end_src

Note that in this example we have left the trajectory logger in place,
so in fact this XML produces both =output.traj= and =output.tree=
files.

Loading the tree file in a phylogenetic tree viewer such as [[https://icytree.org][icytree]] allows you
to view the result:

[[file:examples/BDtree_output.png]]

*** Logging typed trees

The example model in the previous section contained only one main population
type (besides the sample population).  However, many interesting models
involve multiple types and result in trees whose edges are associated with
different populations.  The standard BEAST tree logger used in the previous
example will not record this information in its output file.

In order to include this information so that it can be shown on the tree,
you'll need to use the =TypedTreeLogger= in place of the standard logger:

#+begin_src xml
  <beast version="2.0" namespace="beast.base.inference:beast.base.inference.parameter:remaster">
    <run spec="Simulator" nSims="1">
      <simulate id="tree" spec="SimulatedTree">
        <trajectory id="trajectory" spec="StochasticTrajectory" maxTime="10">
          <population id="X" spec="RealParameter" value="1"/>
          <population id="Y" spec="RealParameter" value="0"/>
          <samplePopulation id="samp" spec="RealParameter" value="0"/>

          <reaction spec="Reaction" rate="1.4"> X -> 2X </reaction>
          <reaction spec="Reaction" rate="0.1"> X -> Y </reaction>
          <reaction spec="Reaction" rate="0.5"> X -> 0 </reaction>
          <reaction spec="Reaction" rate="0.5"> Y -> samp </reaction>
        </trajectory>
      </simulate>

      <logger fileName="output.trees" mode="tree">
        <log spec="TypedTreeLogger" tree="@tree"/>
      </logger>
    </run>
  </beast>
#+end_src

By loading the resulting tree file into [[https://icytree.org][icytree]] and colouring the edges using
the "type" attribute produces a visualisation in which the tree edges are
labeled by their corresponding population types:

[[file:examples/BD2type_output.png]]

*** Logging untyped trees

Occasionally you really *do* want to log trees without any additional
type annotation.  With single-population models this can be achieved
as shown in [[*Self-contained tree simulation XMLs]].  However,
multi-population models (or models with sub-populations) often produce
trees with internal nodes representing type changes.  These nodes will
appear in the output trees, even when the edge types are not recorded.
This can also produce problems when using Remaster =SimulatedTree= objects
to initialise standard BEAST MCMC analyses, as the extra nodes will not
be properly understood.

To avoid these problems, use =TypedTreeLogger= as in the previous
section, but add the attribute ~removeSingletonNodes="true"~. This
will produce a tree in which the internal degree 3 nodes (one parent
two children) are still annotated, but in which degree 2 nodes (one
parent one child) are removed.  Such trees are fully compatible with
the rest of BEAST.

* Coalescent simulations

While birth-death simulations (both exact and approximate) are the
prime focus of Remaster, it is also possible to perform a variety
of coalescent simulations.

** Model specification

Like birth-death model specifications, coalescent model specifications
are composed of ~<population/>~ and ~<reaction/>~ elements.  However,
Coalescent model specification differs from the specification of
birth-death models in three important ways.

Firstly, time increases into the past and thus represents age before the "present".

Secondly, instead of allowing population dynamics to be a realisation
of a stochastic process, coalescent models operate under the
assumption that the effective population sizes and how they vary in time are
known at the outset. Pairs of tree lineages associated with these populations
coalesce at a rate $1/N_e(t)$ where $N_e(t)$ is the effective population size
at time $t$.  (Note that in Remaster and BEAST 2 in general,
"effective population size" is simply the inverse
pairwise coalescent rate, and therefore has units of "time".)
For this reason, ~<population/>~ elements are associated with BEAST 2 ~PopulationFunction~ objects
rather than regular ~Function~ objects. For instance, the following element
introduces a constant-size population with $N_e(t)=10$:
#+begin_src xml
<population id="pop" spec="ConstantPopulation" popSize="10"/>
#+end_src
(Like population elements in birth-death models, these population
elements must be marked with an ~id~ attribute.)

Thirdly, ~<reaction/>~ elements are interpreted "backward in time" and
apply directly to sampled phylogenetic tree lineages.  Because of
this, there is no concept of a "sampled" population or lineage.  As
usual though, reactions can be either continuous or punctual.  They're
useful for two main things: creating new lineages (i.e. samples/tips)
and transitioning lineages between populations (e.g.  migration events
in structured coalescent models). For instance, the following punctual
reaction generates 10 lineages associated with the population "pop" at
time 0:
#+begin_src xml
<reaction spec="PunctualReaction" n="10" times="0"> 0 -> pop </reaction>
#+end_src

*** Parents and children in coalescent reactions

Since coalescent reactions are applied to lineages backward in time, the
meaning of parents and children is reversed.

For instance, in reaction
#+begin_src xml
<reaction spec="Reaction" rate="1"> S -> L </reaction>
#+end_src
(which might appear in a structured coalescent model)
applies to all lineages currently associated with the =S= population.  The
"parent" in this reaction is the product =L=, while the child is the reactant =S=.

Note that, despite the switch in direction, coalescent reactions
follow the same rules as birth-death reactions for assigning parents
to children.  The ":id" suffix can be applied to both reactant
and product to force a parent-child relationship where the default
assignment is not correct.

** Trajectory simulation

While there's no real concept of a population-level trajectory simulation in the context
of a coalescent model that conditions on population dynamics, Remaster still 
requires that you wrap your coalescent model specification in a ~CoalescentTrajectory~
object, which is analogous to the birth-death trajectory objects.

For example, the ~CoalescentTrajectory~ object in the following XML
represents a two-deme structured coalescent model in which one of the
populations is growing exponentially toward the present:

#+begin_src xml
<beast version="2.0"
       namespace="beast.base.inference:beast.base.inference.parameter:remaster
                  :beast.base.evolution.tree.coalescent">
  <run spec="Simulator" nSims="1">
    <simulate  id="traj" spec="CoalescentTrajectory" maxTrajLogAge="10">
      <population id="C" spec="ConstantPopulation" popSize="10.0"/>
      <population id="E" spec="ExponentialGrowth" popSize="100.0" growthRate="1"/>

      <reaction spec="Reaction" rate="0.1"> C -> E </reaction>

      <reaction spec="PunctualReaction" n="50" times="0">0 -> C</reaction>
      <reaction spec="PunctualReaction" n="50" times="0">0 -> E</reaction>
    </simulate >

    <logger fileName="output.traj" log="@traj"/>
  </run>
</beast>
#+end_src

*Important:* Note the addition of ":beast.base.evolution.tree.coalescent" to the
~namespace~ attribute.  This is necessary to avoid errors due to BEAST not being
able to find the ~ConstantPopulation~ and ~ExponentialGrowth~ classes, which are
part of BEAST 2 itself, not Remaster.

When coalescent trajectories are logged, as in the above example, the
output is simply a set of regularly-spaced samples of the effective
population size on which the model is conditioned.  (The maximum time
recorded is fixed by the value of the optional ~maxTrajLogAge~
attribute of ~CoalescentTrajectory~, which here is set to 10. The sampling
frequency can be set using another optional attribute, ~loggingGridSize~, but
defaults to 101 samples.)

For example, loading the trajectory file generated by the above XML into R and plotting
it yields:
#+begin_src R
loadTrajectories("output.traj") %>% ggplot(aes(t, value, col=population)) + geom_line()
#+end_src

file:examples/Ctraj_output.png

Because the population size dynamics are fixed, reactions described by
~<reaction>~ elements have no effect on this output.

** Tree simulation

As for birth-death models, we can simulate trees by wrapping the ~CoalescentTrajectory~
object in a ~SimulatedTree~:

#+begin_src xml
<beast version="2.0"
       namespace="beast.base.inference:beast.base.inference.parameter:remaster
                  :beast.base.evolution.tree.coalescent">
  <run spec="Simulator" nSims="1">
    <simulate id="tree" spec="SimulatedTree">
      <trajectory  id="traj" spec="CoalescentTrajectory" maxTrajLogAge="10">
        <population id="C" spec="ConstantPopulation" popSize="10.0"/>
        <population id="E" spec="ExponentialGrowth" popSize="100.0" growthRate="1"/>

        <reaction spec="Reaction" rate="0.5"> C -> E </reaction>

        <reaction spec="PunctualReaction" n="50" times="0">0 -> C</reaction>
        <reaction spec="PunctualReaction" n="50" times="0">0 -> E</reaction>
      </trajectory >
    </simulate>

    <logger fileName="output.tree" mode="tree">
      <log spec="TypedTreeLogger" tree="@tree"/>
    </logger>
  </run>
</beast>
#+end_src

In the generated tree we see how the continuous reaction enables
one-way migration from =C= to =E=, while the two punctual reactions
produce 50 tips in each of the two populations at time zero:

file:examples/Ctree_output.png

** More complex coalescent models

The kinds of population dynamics which can be expressed in Remaster is dictated
by the kinds of ~PopulationFunction~ classes which are available.  In BEAST itself,
only ~ConstantPopulation~ and ~ExponentialGrowth~ are provided, which limits the
utility of the simulator.

One approach to producing more complex scenarios is to use the ~CompoundPopulationModel~
class available in the [[https://tgvaughan.github.io/feast][feast]] package to combine these BEAST's primitive population
models in piecewise fashion.

For instance, the following XML simulates trees under a population model with a
strong population bottleneck between times 5 and 5.1, and an eventual exponential
decline into the past (growth into the future):

#+begin_src xml
<beast version="2.0"
       namespace="beast.base.inference.parameter:remaster
                  :beast.base.evolution.tree.coalescent
                  :feast.popmodels">
  <run spec="Simulator" nSims="1">
    <simulate id="tree" spec="SimulatedTree">
      <trajectory id="traj" spec="CoalescentTrajectory"
                  maxTrajLogAge="10" trajLogSampleCount="1000">
        <population id="pop" spec="CompoundPopulationModel" changeTimes="2.0 2.2 3.0">
          <populationModel spec="ConstantPopulation" popSize="100.0"/>
          <populationModel spec="ConstantPopulation" popSize="1.0"/>
          <populationModel spec="ConstantPopulation" popSize="100.0"/>
          <populationModel spec="ExponentialGrowth" popSize="100.0" growthRate="1"/>
        </population>

        <reaction spec="PunctualReaction" n="100" times="0">0 -> pop</reaction>

      </trajectory>
    </simulate>

    <logger fileName="output.trees" mode="tree">
      <log spec="TypedTreeLogger" tree="@tree"/>
    </logger>

    <logger fileName="output.traj" log="@traj"/>
  </run>
</beast>
#+end_src


Plotting the trajectory yields a visualisation of the compound model:
#+begin_src R
loadTrajectories("output.traj") %>% ggplot(aes(t,value,col=population)) + geom_line()
#+end_src
file:examples/ComplexCoalescent_traj.png

The following is an example output tree:
file:examples/ComplexCoalescent_tree.png

Keep in mind that complex coalescent scenarios are sometimes better
treated using the diffusion-limit birth-death approximation framework
provided by ~DeterministicTrajectory~.

* Integrating with BEAST

Unlike MASTER, Remaster is tightly integrated with the rest of BEAST in the following ways:

- trees are standard BEAST =Tree= objects,
- it uses standard =Logger= objects to produce output,
- it uses ~RealParameter~ or ~Function~ objects to define birth-death populations,
- it uses ~PopulationFunction~ objects to define coalescent populations,
- the inputs defining reaction rates, times, probabilities or numbers
  expect generic ~Function~ inputs.

This means that it is possible to use Remaster to initialise MCMC chains, to
simulate sequence data, or to produce single-XML simulation studies which combine
both simulation and inference.

Furthermore, the copious use of =Function= input types means that one can use
the =Function=-specific objects from the [[https://tgvaughan.github.io/feast][feast]] package to create simulation XMLs
in which parameters are transformed in moderately complex ways before being
applied to the simulation.

For instance, suppose one wishes to simulate a trajectory under an
epidemiological model defined by a basic reproductive number
$R=\lambda/\mu$ instead of a birth rate.  One can easily do this as
follows:
#+begin_src xml
  <beast version="2.0" namespace="beast.base.inference:remaster">
    <param id="R" spec="RealParameter" value="1.5"/>
    <param id="mu" spec="RealParameter" value="1.0"/>

    <param id="lambda" spec="feast.expressions.ExpCalculator" value="R*mu">
      <arg idref="R"/>
      <arg idref="mu"/>
    </param>

    <run spec="Simulator" nSims="1">
      <simulate id="trajectory" spec="StochasticTrajectory" maxTime="10">
        <population id="X" spec="RealParameter" value="1"/>
        <reaction spec="Reaction" rate="@lambda"> X -> 2X </reaction>
        <reaction spec="Reaction" rate="@mu"> X -> 0 </reaction>
      </simulate>

      <logger fileName="output.traj">
        <log idref="trajectory"/>
      </logger>
    </run>
  </beast>
#+end_src

* Examples

The =examples/= directory of the package repository contains a growing list of example
Remaster scripts.  These are installed alongside the package when you install it via BEAUti.
You can also access these example scripts directly via the GitHub repository for the
package: https://github.com/tgvaughan/remaster/tree/master/examples.


* Appendix

** Condition syntax

The expressions provided to =endsWhen= and =mustHave= conform to the following
grammar:

#+begin_example
  expression :
    '(' expression ')'
    |   (SUM|MIN|MAX) '(' expression ')'
    |   expression ('*'|'/'|'%') expression
    |   expression ('+'|'-') expression
    |   expression ('=='|'!='|'<'|'>'|'<='|'>=') expression
    |   expression ('&&'|'||') expression
    |   POP_ID
    |   NUMBER
    ;
#+end_example

Here SUM(), MIN() and MAX() are functions which take a population
vector and compute the sum, minimum, or maximum, respectively.

=POP_ID= is any population ID such as "X" or "I[0]".

Beware when assembling these instructions that XML rules must be
obeyed.  In particular, you must use XML entities for characters such
as & and >, so that instead of writing ="X>2 && Y>10"= you must
instead write ="X&gt;2 &amp;&amp; Y&gt;10"=.

Relevant characters and their corresponding XML entities are as follows

|-----------+--------|
| Character | Entity |
|-----------+--------|
| >         | &gt;   |
| <         | &lt;   |
| &         | &amp;  |
|-----------+--------|

# Local Variables:
# org-html-validation-link: nil
# org-html-htmlize-output-type: css
# End:
